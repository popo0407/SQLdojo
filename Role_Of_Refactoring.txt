refactoring_guidelines:
  purpose: |
    本ガイドラインは、システムのリファクタリングを安全かつ効率的に進めるために遵守すべき原則と具体的な手順を定めます。
    特に、AIや外部エンジニアがプロジェクトに参加する際に、既存の機能への影響を最小限に抑え、品質を維持することを目的とします。

  basic_principles:
    - name: "本番機能の保護"
      description: "既存の本番機能は絶対に削除、コメントアウト、またはモック化してはなりません。仮実装やモックはテスト専用コードに限定し、プロダクションコードには絶対に入れないでください。"
    - name: "徹底した動作確認とテスト"
      description: "リファクタリング後も、すべての主要機能（データベース接続、API、UIなど）が正しく動作することを必ず確認してください。動作確認用のテストや手順を必ず実施・記録してください。"
    - name: "透明性と説明責任"
      description: "削除または変更した箇所については、その理由と影響範囲を詳細にコメントし、プルリクエストの説明に明記してください。本番機能に関わる変更は、必ず事前に相談し、承認を得てから実施してください。"
    - name: "設計意図の尊重"
      description: "依存関係や設計意図（例: なぜコネクションプールを使用するのかなど）をREADMEやコードコメントで明示してください。リファクタリング時は、既存の設計意図を尊重し、それを壊さないように注意してください。"
    - name: "段階的な変更"
      description: "大きなリファクタリングは小さな単位に分割し、それぞれの変更ごとに動作確認とレビューを実施してください。"

  detailed_rules:
    - category: "本番機能の保護"
      rules:
        - id: "1.1"
          name: "本番接続・本番処理の維持"
          description: "既存の本番接続、本番処理に関わるコード（Snowflake接続や本番データベースアクセスなど）は、絶対に削除、コメントアウト、またはモック化しないでください。"
          ai_external_engineer_instructions:
            - "Snowflake接続や本番DBアクセスのコードは絶対に削除・モック化しないでください。"
            - "既存の本番API・DB接続の動作を維持したまま、リファクタリングしてください。"
        - id: "1.2"
          name: "テスト専用コードへの限定"
          description: "仮実装やモックは、テスト専用ファイルまたはテスト用DI (Dependency Injection) でのみ使用し、プロダクションコードには絶対に入れないでください。"
          ai_external_engineer_instructions:
            - "テストや開発用のモックは、テスト専用ファイルやテスト用DIでのみ使ってください。"
        - id: "1.3"
          name: "例外時の承認"
          description: "もし本番機能の削除やモック化がやむを得ず必要な場合は、必ず理由を説明し、チームリーダーまたは関係者から承認を得てから実施してください。"
          ai_external_engineer_instructions:
            - "もし本番機能の削除やモック化が必要な場合は、必ず理由を説明し、承認を得てから実施してください。"

    - category: "動作確認とテストの徹底"
      rules:
        - id: "2.1"
          name: "全主要機能の動作確認"
          description: "リファクタリング後も、すべての主要機能（DB接続、API、UIなど）が正常に動作することを必ず確認してください。"
        - id: "2.2"
          name: "テスト駆動リファクタリング (TDR)"
          description: "リファクタリング前に、対象機能の動作確認テストを作成・実行してください。リファクタリング後、同じテストがすべてパスすることを確認してから次のステップに進んでください。テストが失敗した場合は、リファクタリングを一時停止し、原因を特定して修正してください。"
        - id: "2.3"
          name: "テストの実施・記録"
          description: "動作確認用のテストや手順を必ず実施し、その結果を記録してください。"

    - category: "差分レビューと説明義務"
      rules:
        - id: "3.1"
          name: "変更箇所の詳細説明"
          description: "リファクタリングで削除・変更した箇所は、必ずその理由と影響範囲をコードコメントまたはプルリクエストの説明に明確に記述してください。"
        - id: "3.2"
          name: "事前相談と承認"
          description: "本番機能に影響を与える可能性のある変更については、必ず事前にチームリーダーまたは関係者に相談し、承認を得てください。"

    - category: "設計・依存関係の明示"
      rules:
        - id: "4.1"
          name: "設計意図の明示"
          description: "依存関係や設計意図（例: なぜコネクションプールを使用するのかなど）をREADMEファイルやコードコメントで明確に記述してください。"
        - id: "4.2"
          name: "設計意図の維持"
          description: "リファクタリング時には、既存の設計意図を尊重し、それを損なわないように変更を行ってください。"

    - category: "小さな変更単位での実施"
      rules:
        - id: "5.1"
          name: "PR/コミット単位での分割"
          description: "大きなリファクタリングは、機能を損なわない小さな単位に分割し、それぞれの変更ごとに動作確認とコードレビューを実施してください。"
        - id: "5.2"
          name: "段階的なコミットとタグ"
          description: "各段階でコミットを行い、必要に応じてタグを作成することで、問題発生時に容易に以前のバージョンに戻れるようにしてください。"

    - category: "リファクタリング前の影響範囲分析"
      rules:
        - id: "6.1"
          name: "全依存関係の特定"
          description: "リファクタリングを開始する前に、変更対象となるクラス、関数、プロパティのすべての依存関係をgrep検索などで洗い出してください。"
        - id: "6.2"
          name: "未使用の確認"
          description: "削除または変更を予定しているクラス、関数、プロパティが他のファイルで参照されていないか、必ず確認してください。"
        - id: "6.3"
          name: "不明な場合の対応"
          description: "影響範囲が不明確な場合は、リファクタリングを中止し、段階的な移行計画を検討してください。"

    - category: "後方互換性を持つ段階的移行"
      rules:
        - id: "7.1"
          name: "新旧APIの並行稼働"
          description: "既存のAPI、クラス、プロパティを削除する前に、新しいAPI、クラス、プロパティを先に実装してください。古いAPIと新しいAPIを並行して動作させ、段階的に移行を進めてください。"
        - id: "7.2"
          name: "未使用コードの削除"
          description: "移行が完了し、古いコードが完全に不要になったことを確認してから、そのコードを削除してください。"

    - category: "設定変更時の環境変数対応"
      rules:
        - id: "8.1"
          name: "環境変数名の互換性"
          description: "設定クラスを変更する場合は、既存の環境変数名との互換性を必ず確認してください。Pydanticを使用している場合、extra = \"ignore\"を設定し、未定義の環境変数を無視するようにしてください。"
        - id: "8.2"
          name: "エイリアスの設定"
          description: "環境変数名を変更する場合は、古い名前でも動作するようにエイリアスを設定することを検討してください。"
        - id: "8.3"
          name: "実際の環境での確認"
          description: "設定変更後は、実際の環境変数ファイル（例: .env）での動作確認を必ず実施してください。"
        - id: "8.4"
          name: "env.exampleの更新"
          description: "新しい設定構造に合わせてenv.exampleファイルを必ず更新してください。"

    - category: "エラー発生時の即座のロールバック"
      rules:
        - id: "9.1"
          name: "作業の中止"
          description: "リファクタリング中に予期せぬエラーが発生した場合は、即座に作業を停止してください。"
        - id: "9.2"
          name: "原因特定と修正検討"
          description: "エラーの根本原因を特定し、修正方法を検討してください。"
        - id: "9.3"
          name: "ロールバックの優先"
          description: "修正が困難であると判断された場合は、前の安定バージョンにロールバックすることを優先してください。"

    - category: "本番環境での動作確認"
      rules:
        - id: "10.1"
          name: "本番環境またはそれに近い環境での確認"
          description: "リファクタリング後は、開発環境だけでなく、本番環境またはそれに近いテスト環境でも必ず動作確認を行ってください。"
        - id: "10.2"
          name: "問題発生時のロールバック"
          description: "本番環境で問題が発生した場合は、即座に前の安定バージョンにロールバックしてください。"

    - category: "ドキュメント更新の義務"
      rules:
        - id: "11.1"
          name: "関連ドキュメントの更新"
          description: "リファクタリング後は、関連するドキュメント（README、API仕様書、設計書など）を必ず最新の状態に更新してください。"
        - id: "11.2"
          name: "設定変更点の明記"
          description: "設定変更を行った場合は、新しい環境変数の設定方法を明確に記述してください。"
        - id: "11.3"
          name: "移行手順の明記"
          description: "後方互換性のない変更や段階的な移行を伴う変更については、詳細な移行手順を明記してください。"

    - category: "依存関係・import・型アノテーションの整理"
      rules:
        - id: "12.1"
          name: "影響範囲の洗い出し"
          description: "クラス、関数、モジュールを削除、リネーム、または大幅に変更する場合は、grepなどのツールを使用して、すべてのファイル（テストコードを含む）におけるimport、利用箇所、型アノテーションを徹底的に洗い出してください。"
        - id: "12.2"
          name: "全箇所の修正・削除"
          description: "該当するシンボルのimport、利用箇所、型アノテーションが残っていないかを確認し、すべて新しい仕様に合わせて修正または削除してください。"
        - id: "12.3"
          name: "段階的削除の検討"
          description: "影響範囲が広範にわたる場合は、まずdeprecated化（警告やコメントの追加）を検討し、段階的に削除を進めてください。"
        - id: "12.4"
          name: "全テストの実行"
          description: "リファクタリング後は、必ずすべてのテストを実行し、エラーが発生しないことを確認してください。"
        - id: "12.5"
          name: "呼び出し元の修正"
          description: "属性名やインターフェースが変わる場合は、呼び出し元の全ての参照箇所（属性名、型、初期化方法）を新仕様に合わせて修正してください。"

    - category: "リファクタリングの必要性・影響度評価"
      rules:
        - id: "13.1"
          name: "「完璧な設計」よりも「動作する設計」を重視"
          description: "「完璧な設計」を目指しすぎず、まずは「動作する設計」であることを優先してください。"
        - id: "13.2"
          name: "コストの過小評価の回避"
          description: "リファクタリングにかかるコスト（時間、労力、潜在的なリスク）を過小評価しないでください。"
        - id: "13.3"
          name: "設定クラスの重要性の認識"
          description: "設定クラスはアプリケーション全体の基盤であることを認識し、その変更がすべてのファイルに影響を与える可能性があることを理解してください。"
        - id: "13.4"
          name: "関連修正の認識"
          description: "リファクタリングは、テスト、ドキュメント、環境変数など、関連するすべての要素の修正が必要となることを認識してください。"