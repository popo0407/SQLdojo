# デプロイパッケージ作成スクリプト 

# 設定
$sourceProjectRoot = "C:\Users\user\Downloads\HTMLEditer"
$FrontendPath = Join-Path $sourceProjectRoot "frontend"
$BackendPath = Join-Path $sourceProjectRoot "backend"
$tempDir = "C:\Users\user\Downloads\HTMLEditor_for_deploy"
$destinationZip = "C:\Users\user\Downloads\DATAZIP_summary.zip"

# フロントエンドを常に再ビルドする（.env を本番用にコピーしてビルド）
Write-Host "フロントエンドのビルド準備を開始します..." -ForegroundColor Yellow

# .env.production を削除（存在する場合）
$envProd = Join-Path $FrontendPath ".env.production"
if (Test-Path $envProd) {
    Write-Host "既存の .env.production を削除します: $envProd" -ForegroundColor Yellow
    Remove-Item $envProd -Force
}

# frontend/.env を frontend/.env.production としてコピー（.env が存在する場合）
$envFile = Join-Path $FrontendPath ".env"
if (Test-Path $envFile) {
    Write-Host "frontend/.env を .env.production にコピーします" -ForegroundColor Green
    Copy-Item -Path $envFile -Destination $envProd -Force
} else {
    Write-Host "警告: frontend/.env が見つかりません。ビルド時の環境変数が不足している可能性があります。" -ForegroundColor Yellow
}

# npm run build を実行
Write-Host "npm run build を実行します（$FrontendPath）" -ForegroundColor Yellow
Push-Location $FrontendPath
try {
    # PDF CSS同期を先に実行
    Write-Host "PDF CSSを同期中..." -ForegroundColor Cyan
    npm run sync-pdf-css

    # pdf.cssをpublic/pdf.cssにもコピー（同期スクリプトと同じ処理）
    $frontendCss = Join-Path $FrontendPath "src\styles\pdf.css"
    $publicPdfCss = Join-Path $FrontendPath "public\pdf.css"
    if (Test-Path $frontendCss) {
        $cssContent = Get-Content $frontendCss -Raw -Encoding UTF8
        $publicPdfHeader = @"
/* Copied from frontend/src/styles/pdf.css at deploy time
   HtmlExportService will fetch this CSS file for HTML export styles.
   DO NOT EDIT THIS FILE DIRECTLY - EDIT frontend/src/styles/pdf.css INSTEAD
*/
"@
        $publicPdfContent = $publicPdfHeader + "`n" + $cssContent
        $publicPdfDir = Split-Path $publicPdfCss -Parent
        if (-not (Test-Path $publicPdfDir)) {
            New-Item -ItemType Directory -Path $publicPdfDir -Force | Out-Null
            Write-Host "📁 public ディレクトリを作成: $publicPdfDir" -ForegroundColor Yellow
        }
        $utf8NoBom = New-Object System.Text.UTF8Encoding $false
        [System.IO.File]::WriteAllText($publicPdfCss, $publicPdfContent, $utf8NoBom)
        Write-Host "→ public/pdf.css に同期しました" -ForegroundColor Cyan
    } else {
        Write-Host "❌ pdf.cssが見つかりません: $frontendCss" -ForegroundColor Red
    }

    # npm が存在することを前提にビルドを実行
    npm run build
} catch {
    Write-Host "ERROR: npm run build に失敗しました。出力を確認してください。" -ForegroundColor Red
    Pop-Location
    exit 1
}
Pop-Location

# 準備
Write-Host "作業ディレクトリを準備中..." -ForegroundColor Yellow
if (Test-Path $tempDir) { Remove-Item $tempDir -Recurse -Force }
New-Item -ItemType Directory -Path $tempDir -Force | Out-Null

# ルートファイルをコピー
Write-Host "ルートファイルをコピー中..." -ForegroundColor Yellow
Get-ChildItem $sourceProjectRoot -File | Where-Object { 
    $_.Extension -match '\.(md|html|bat|ps1|txt)$' -and $_.Name -notmatch '^(\.env|package-lock\.json)$'
} | ForEach-Object {
    Copy-Item $_.FullName $tempDir -Force
    Write-Host "  ✓ $($_.Name)" -ForegroundColor Green
}

# バックエンドをコピー
Write-Host "バックエンドファイルをコピー中..." -ForegroundColor Yellow
robocopy "$sourceProjectRoot\backend" "$tempDir\backend" /E /XD .venv __pycache__ .git /XF .env *.db *.pyc *.pyo /NFL /NDL /NJH /NJS

# フロントエンドビルド結果をコピー
Write-Host "フロントエンドビルド結果をコピー中..." -ForegroundColor Yellow
New-Item -ItemType Directory -Path "$tempDir\frontend" -Force | Out-Null
robocopy "$sourceProjectRoot\frontend\build" "$tempDir\frontend" /E /NFL /NDL /NJH /NJS

# パッケージ内容表示
Write-Host ""
Write-Host "パッケージ内容:" -ForegroundColor Magenta
Get-ChildItem $tempDir -Recurse -File | ForEach-Object {
    $relativePath = $_.FullName.Replace($tempDir + "\", "")
    Write-Host "  $relativePath" -ForegroundColor Gray
}

# 圧縮
Write-Host ""
Write-Host "パッケージを圧縮中..." -ForegroundColor Yellow
if (Test-Path $destinationZip) { Remove-Item $destinationZip -Force }
Compress-Archive -Path "$tempDir\*" -DestinationPath $destinationZip -Force

# 完了
$sizeMB = [math]::Round((Get-Item $destinationZip).Length / 1MB, 2)
Write-Host ""
Write-Host "✅ デプロイパッケージ作成完了!" -ForegroundColor Green
Write-Host "出力先: $destinationZip" -ForegroundColor White
Write-Host "サイズ: $sizeMB MB" -ForegroundColor White

# 後片付け
Remove-Item $tempDir -Recurse -Force

Write-Host ""
Write-Host "次のステップ:" -ForegroundColor Yellow
Write-Host "1. ZIPファイルを本番サーバーに転送" -ForegroundColor White
Write-Host "2. deploy-to-iis.ps1を実行" -ForegroundColor White
Write-Host "3. CORS設定を環境に合わせて調整" -ForegroundColor White
